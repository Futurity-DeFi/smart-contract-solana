name: Verifiable Build & Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ANCHOR_VERSION: v0.31.1
      DOCKER_DEFAULT_PLATFORM: linux/amd64
      CARGO_INCREMENTAL: "0"
      SOLANA_CLUSTER_URL: https://api.devnet.solana.com

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2Ô∏è‚É£ Cache cargo deps
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      # 3Ô∏è‚É£ Install Anchor CLI
      - name: Install Anchor CLI
        run: |
          cargo install --git https://github.com/coral-xyz/anchor \
            --tag $ANCHOR_VERSION --locked anchor-cli

      # 4Ô∏è‚É£ Restore program keypair from secret
      - name: Restore program keypair
        run: |
          echo "${{ secrets.PROGRAM_KEYPAIR }}" | base64 -d > program-keypair.json

      # 5Ô∏è‚É£ Validate Program ID in Anchor.toml and lib.rs
      - name: Validate program ID consistency
        run: |
          EXPECTED_PROGRAM_ID=$(solana-keygen pubkey program-keypair.json)

          LIB_RS_ID=$(grep -oP '(?<=declare_id!\(")[^"]+' program/src/lib.rs)
          ANCHOR_TOML_ID=$(grep -A1 '\[programs\.devnet\]' program/Anchor.toml | grep -oP '(?<=futurity = ")[^"]+')

          echo "Expected: $EXPECTED_PROGRAM_ID"
          echo "lib.rs:   $LIB_RS_ID"
          echo "Anchor.toml: $ANCHOR_TOML_ID"

          if [[ "$EXPECTED_PROGRAM_ID" != "$LIB_RS_ID" || "$EXPECTED_PROGRAM_ID" != "$ANCHOR_TOML_ID" ]]; then
            echo "‚ùå Program ID mismatch!"
            exit 1
          fi

      # 6Ô∏è‚É£ Build verifiably
      - name: Anchor verifiable build
        working-directory: program
        run: |
          anchor clean
          anchor build --verifiable

      # 7Ô∏è‚É£ Package build artefacts
      - name: Package artefacts
        run: |
          mkdir -p artefacts
          cp program/target/verifiable/futurity.so  artefacts/
          cp program/target/idl/futurity.json       artefacts/
          shasum -a 256 artefacts/futurity.so >     artefacts/futurity.sha256

      # 8Ô∏è‚É£ Upload build artefacts
      - uses: actions/upload-artifact@v4
        with:
          name: futurity-verifiable-${{ github.sha }}
          path: artefacts
          retention-days: 14

      # 9Ô∏è‚É£ Restore deployer keypair
      - name: Restore deployer keypair
        run: |
          echo "${{ secrets.DEPLOYER_KEYPAIR }}" | base64 -d > deployer-keypair.json

      # üîü Install Solana CLI + Deploy
      - name: Install Solana CLI and Deploy
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.11/install)"
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          solana config set --url $SOLANA_CLUSTER_URL --keypair deployer-keypair.json

          solana program deploy artefacts/futurity.so \
            --program-id program-keypair.json
