name: Futurity • Pre-check → Build → Deploy → Verify

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      cluster:
        description: "Cluster to finalize"
        type: choice
        required: true
        default: devnet
        options: [devnet, mainnet]
      confirm:
        description: "Type FINALIZE to confirm this irreversible action"
        required: true
      program_id:
        description: "Override program ID (blank ⇒ cluster default)"
        required: false
        default: ""

env:
  ANCHOR_VERSION: v0.31.1
  SOLANA_VERSION: 2.2.15
  DOCKER_DEFAULT_PLATFORM: linux/amd64
  CARGO_INCREMENTAL: "0"
  SOLANA_CLUSTER_URL: https://api.devnet.solana.com   # CHANGE for mainnet-beta
  PROGRAM_PUBKEY: GMaCbLs28PYev8gJoPCb1XSHaLpufNqGbNeXEz5c7jzv

jobs:
###############################################################################
# 1️⃣ PRE-CHECK: Validate Program ID everywhere (cache + install Solana CLI)
###############################################################################
  precheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      # Cache Solana CLI static binary
      - name: Cache Solana CLI static binary
        id: solana-static-cli
        uses: actions/cache@v4
        with:
          path: solana-release
          key: solana-static-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Install Solana CLI (download if cache miss)
        if: steps.solana-static-cli.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          URL="https://github.com/jito-foundation/jito-solana/releases/download/v${SOLANA_VERSION}/${ARCHIVE}"
          echo "⏬ Downloading $URL"
          curl -L --retry 5 --retry-delay 3 -o $ARCHIVE $URL
          tar -xjf $ARCHIVE

      - name: Add Solana CLI to PATH
        run: |
          export PATH="$PWD/solana-release/bin:$PATH"
          echo "$PWD/solana-release/bin" >> $GITHUB_PATH
          solana --version

      - name: Restore program keypair & validate Program ID
        shell: bash
        run: |
          printf '%s' '${{ secrets.PROGRAM_KEYPAIR }}' > program-keypair.json
          chmod 600 program-keypair.json

          EXPECTED=$(solana-keygen pubkey program-keypair.json)
          LIB_RS=$(grep -oP '(?<=declare_id!\(")[^"]+' program/programs/futurity/src/lib.rs)
          TOML=$(grep -A2 '\[programs\.devnet\]' program/Anchor.toml | grep -oP '(?<=futurity = ")[^"]+')

          echo "Keypair : $EXPECTED"
          echo "lib.rs  : $LIB_RS"
          echo "Anchor  : $TOML"

          [[ "$EXPECTED" == "$LIB_RS" && "$EXPECTED" == "$TOML" ]] || {
            echo '❌ Program ID mismatch – aborting'; exit 1; }

###############################################################################
# 2️⃣ BUILD: Deterministic Anchor build, cache Anchor CLI
###############################################################################
  build:
    needs: precheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      # Cache Anchor CLI binary
      - name: Cache Anchor CLI
        id: anchor-binary
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/anchor
          key: anchor-${{ runner.os }}-${{ env.ANCHOR_VERSION }}

      - name: Install Anchor CLI (only if cache miss)
        if: steps.anchor-binary.outputs.cache-hit != 'true'
        run: |
          cargo install --git https://github.com/coral-xyz/anchor \
            --tag $ANCHOR_VERSION --locked anchor-cli

      # Cache cargo deps
      - name: Cache Cargo deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Anchor verifiable build
        working-directory: program
        run: |
          anchor clean
          anchor build --verifiable

      - name: Package artefacts
        run: |
          mkdir -p artefacts
          cp program/target/verifiable/futurity.so artefacts/
          cp program/target/idl/futurity.json      artefacts/
          shasum -a 256 artefacts/futurity.so >    artefacts/futurity.sha256

      - uses: actions/upload-artifact@v4
        with:
          name: futurity-${{ github.sha }}
          path: artefacts
          retention-days: 14

###############################################################################
# 3️⃣ DEPLOY: use DEPLOY_KEYPAIR for fee payer, PROGRAM_KEYPAIR for program ID
###############################################################################
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: mainnet
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      - uses: actions/download-artifact@v4
        with:
          name: futurity-${{ github.sha }}
          path: artefacts

      # Cache Solana CLI static binary
      - name: Cache Solana CLI static binary
        id: solana-static-cli
        uses: actions/cache@v4
        with:
          path: solana-release
          key: solana-static-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Install Solana CLI (download if cache miss)
        if: steps.solana-static-cli.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          URL="https://github.com/jito-foundation/jito-solana/releases/download/v${SOLANA_VERSION}/${ARCHIVE}"
          echo "⏬ Downloading $URL"
          curl -L --retry 5 --retry-delay 3 -o $ARCHIVE $URL
          tar -xjf $ARCHIVE

      - name: Add Solana CLI to PATH
        run: |
          export PATH="$PWD/solana-release/bin:$PATH"
          echo "$PWD/solana-release/bin" >> $GITHUB_PATH
          solana --version

      - name: Restore keypairs
        run: |
          printf '%s' '${{ secrets.PROGRAM_KEYPAIR }}' > program-keypair.json
          printf '%s' '${{ secrets.DEPLOY_KEYPAIR }}'  > deploy-keypair.json
          chmod 600 program-keypair.json deploy-keypair.json

      - name: Deploy program
        run: |
          solana config set --url $SOLANA_CLUSTER_URL --keypair deploy-keypair.json
          solana program deploy artefacts/futurity.so \
            --program-id program-keypair.json \
            --upgrade-authority program-keypair.json

###############################################################################
# 4️⃣ VERIFY: check on-chain program == build for this commit
###############################################################################
  verify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      # Cache Solana CLI static binary
      - name: Cache Solana CLI static binary
        id: solana-static-cli
        uses: actions/cache@v4
        with:
          path: solana-release
          key: solana-static-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Install Solana CLI (download if cache miss)
        if: steps.solana-static-cli.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          URL="https://github.com/jito-foundation/jito-solana/releases/download/v${SOLANA_VERSION}/${ARCHIVE}"
          echo "⏬ Downloading $URL"
          curl -L --retry 5 --retry-delay 3 -o $ARCHIVE $URL
          tar -xjf $ARCHIVE

      - name: Add Solana CLI to PATH
        run: |
          export PATH="$PWD/solana-release/bin:$PATH"
          echo "$PWD/solana-release/bin" >> $GITHUB_PATH
          solana --version

      # Cache solana-verify CLI
      - name: Cache solana-verify
        id: verify-bin
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/solana-verify
          key: solana-verify-${{ runner.os }}-0.4.0

      - name: Install solana-verify (compile if needed)
        if: steps.verify-bin.outputs.cache-hit != 'true'
        run: cargo install solana-verify --locked

      - name: Verify deterministic build
        run: |
          solana-verify verify-from-repo \
            --url $SOLANA_CLUSTER_URL \
            --program-id $PROGRAM_PUBKEY \
            --library-name futurity \
            --commit-hash ${{ github.sha }} \
            --mount-path program/programs/futurity \
            https://github.com/${{ github.repository }} > verify.log 2>&1

          if grep -q "Verification succeeded" verify.log; then
            echo "✅ Verification passed."
          else
            echo "❌ Verification failed. See details below:"
            cat verify.log
            exit 1
          fi

###############################################################################
# 5️⃣ MAINNET DEPLOY: Manual gate, deploy, verify, publish IDL, remove upgrade authority
###############################################################################
  mainnet-deploy:
    needs: verify
    runs-on: ubuntu-latest
    environment:
      name: mainnet
      url: https://explorer.solana.com/address/${{ env.PROGRAM_PUBKEY }}?cluster=mainnet-beta
    steps:
      - name: Manual approval & fund check
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
          issue-body: |
            Please ensure the deployer wallet is funded for mainnet deployment. You can check the balance with:
            solana balance ${{ secrets.DEPLOY_KEYPAIR_MAINNET }} --url https://api.mainnet-beta.solana.com

      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      - uses: actions/download-artifact@v4
        with:
          name: futurity-${{ github.sha }}
          path: artefacts

      # Cache Solana CLI static binary
      - name: Cache Solana CLI static binary
        id: solana-static-cli
        uses: actions/cache@v4
        with:
          path: solana-release
          key: solana-static-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Install Solana CLI (download if cache miss)
        if: steps.solana-static-cli.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          URL="https://github.com/jito-foundation/jito-solana/releases/download/v${SOLANA_VERSION}/${ARCHIVE}"
          echo "⏬ Downloading $URL"
          curl -L --retry 5 --retry-delay 3 -o $ARCHIVE $URL
          tar -xjf $ARCHIVE

      - name: Add Solana CLI to PATH
        run: |
          export PATH="$PWD/solana-release/bin:$PATH"
          echo "$PWD/solana-release/bin" >> $GITHUB_PATH
          solana --version

      - name: Restore keypairs (mainnet)
        run: |
          printf '%s' '${{ secrets.PROGRAM_KEYPAIR_MAINNET }}' > program-keypair-mainnet.json
          printf '%s' '${{ secrets.DEPLOY_KEYPAIR_MAINNET }}'  > deploy-keypair-mainnet.json
          chmod 600 program-keypair-mainnet.json deploy-keypair-mainnet.json

      - name: Deploy program to mainnet
        run: |
          solana config set --url https://api.mainnet-beta.solana.com --keypair deploy-keypair-mainnet.json
          solana program deploy artefacts/futurity.so \
            --program-id program-keypair-mainnet.json \
            --upgrade-authority program-keypair-mainnet.json

      - name: Publish IDL to mainnet
        run: |
          anchor idl upgrade --provider.cluster mainnet \
            --filepath artefacts/futurity.json \
            ${{ env.PROGRAM_PUBKEY }}

      - name: Remove upgrade authority (best practice)
        run: |
          solana program set-upgrade-authority ${{ env.PROGRAM_PUBKEY }} \
            --new-upgrade-authority 11111111111111111111111111111111 \
            --keypair deploy-keypair-mainnet.json

      - name: Standard verify on mainnet
        run: |
          solana-verify verify-from-repo \
            --url https://api.mainnet-beta.solana.com \
            --program-id ${{ env.PROGRAM_PUBKEY }} \
            --library-name futurity \
            --commit-hash ${{ github.sha }} \
            --mount-path program/programs/futurity \
            https://github.com/${{ github.repository }}

      - name: OtterSec remote verify
        run: |
          solana-verify verify \
            --url https://api.mainnet-beta.solana.com \
            --program-id ${{ env.PROGRAM_PUBKEY }} \
            --library-name futurity \
            --remote

###############################################################################
# 6️⃣ FINALIZE UPGRADE AUTHORITY: Manual irreversible removal of upgrade authority
###############################################################################
  finalize-upgrade-authority:
    if: always()
    runs-on: ubuntu-latest
    needs: [verify]
    environment:
      name: ${{ github.event.inputs.cluster == 'mainnet' && 'mainnet' || 'devnet' }}
      url: ${{ github.event.inputs.cluster == 'mainnet' && format('https://explorer.solana.com/address/{0}?cluster=mainnet-beta', env.PROGRAM_PUBKEY) || format('https://explorer.solana.com/address/{0}?cluster=devnet', env.PROGRAM_PUBKEY) }}
    permissions:
      contents: read
    steps:
      # ───── guardrail ─────────────────────────────────────────────────
      - name: Safety confirmation
        if: github.event.inputs.confirm != null
        run: |
          [[ "${{ github.event.inputs.confirm }}" == "FINALIZE" ]] || {
            echo "::error::You must type FINALIZE"; exit 1; }

      - uses: actions/checkout@v4
        with: {fetch-depth: 1}

      # Cache Solana CLI static binary
      - name: Cache Solana CLI static binary
        id: solana-static-cli
        uses: actions/cache@v4
        with:
          path: solana-release
          key: solana-static-${{ runner.os }}-${{ env.SOLANA_VERSION }}

      - name: Install Solana CLI (download if cache miss)
        if: steps.solana-static-cli.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="solana-release-x86_64-unknown-linux-gnu.tar.bz2"
          URL="https://github.com/jito-foundation/jito-solana/releases/download/v${SOLANA_VERSION}/${ARCHIVE}"
          echo "⏬ Downloading $URL"
          curl -L --retry 5 --retry-delay 3 -o $ARCHIVE $URL
          tar -xjf $ARCHIVE

      - name: Add Solana CLI to PATH
        run: |
          export PATH="$PWD/solana-release/bin:$PATH"
          echo "$PWD/solana-release/bin" >> $GITHUB_PATH
          solana --version

      # ───── restore deploy keypair (current authority) ───────────────
      - name: Restore deployer keypair
        run: |
          if [[ "${{ github.event.inputs.cluster }}" == "mainnet" ]]; then
            printf '%s' '${{ secrets.DEPLOY_KEYPAIR_MAINNET }}' > deployer.json
          else
            printf '%s' '${{ secrets.DEPLOY_KEYPAIR }}' > deployer.json
          fi
          chmod 600 deployer.json
          echo "Deployer pubkey: $(solana-keygen pubkey deployer.json)"

      # ───── choose cluster & program ID ───────────────────────────────
      - id: ctx
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.cluster }}" == "mainnet" ]]; then
            URL=https://api.mainnet-beta.solana.com
            DEFAULT_ID=${{ env.PROGRAM_PUBKEY }}
          else
            URL=https://api.devnet.solana.com
            DEFAULT_ID=${{ env.PROGRAM_PUBKEY }}
          fi
          PROG="${{ github.event.inputs.program_id }}"
          [[ -z "$PROG" ]] && PROG=$DEFAULT_ID
          echo "url=$URL"     >> $GITHUB_OUTPUT
          echo "program=$PROG" >> $GITHUB_OUTPUT
          echo "Cluster URL : $URL"
          echo "Program ID  : $PROG"

      # ───── ensure program exists — fail immediately if not ──────────
      - name: Check program account exists
        env:
          URL: ${{ steps.ctx.outputs.url }}
          PID: ${{ steps.ctx.outputs.program }}
        run: |
          set -e
          echo "Program $PID"
          echo "Cluster $URL"
          solana program show "$PID" --url "$URL" >/dev/null 2>&1 || {
            echo "::error::Program $PID not found on cluster"; exit 1; }
          echo "✅ Program account found."

      # ───── irreversible finalize ─────────────────────────────────────
      - name: Remove upgrade authority
        env:
          URL: ${{ steps.ctx.outputs.url }}
          PID: ${{ steps.ctx.outputs.program }}
        run: |
          solana config set --url "$URL" --keypair deployer.json
          solana program set-upgrade-authority "$PID" \
            --new-upgrade-authority null
          echo "✔️  Upgrade authority set to null."

      # ───── show final state ──────────────────────────────────────────
      - name: Show program info
        env:
          URL: ${{ steps.ctx.outputs.url }}
          PID: ${{ steps.ctx.outputs.program }}
        run: solana program show "$PID" --url "$URL"
